#include<sys/socket.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<string.h>
#include<stdio.h>
#include<time.h>
#include<stdlib.h>

struct sockaddr_in serv_addr,cli_addr;
int listenfd,connfd,op1r,op2r,optrr,w,val,cli_addr_len,abc,xyz,i1,i2;
int res;
unsigned short serv_port= 5000;
char serv_ip[]= "192.168.24.43";
char datebuff[128];
char dateRes[];
char buff[128];

char* substr(const char *src, int m, int n)
{
    int len = n - m;
    char *dest = (char*)malloc(sizeof(char) * (len + 1));

    for (int i = m; i < n && (*(src + i) != '\0'); i++)
    {
        *dest = *(src + i);
        dest++;
    }
 
    *dest = '\0';
 
    return dest - len;
}


int main()
{
    printf("\nTCP ECHO SERVER\n");
    listenfd=socket(AF_INET,SOCK_STREAM,0);
    if(listenfd<0)
    {
        printf("\nSERVER ERROR: Cannot Create Socket.\n");
        exit(1);
    }
    serv_addr.sin_family=AF_INET;
    serv_addr.sin_port=htons(serv_port);
    inet_aton(serv_ip,(&serv_addr.sin_addr));
    
    xyz=(bind(listenfd, (struct sockaddr*)&serv_addr,sizeof(serv_addr)));
    
    if(xyz < 0)
    {
        printf("\nSERVER ERROR: Cannot bind.\n");
        close(listenfd);
        exit(1);
    }
    abc = (listen(listenfd,5));
    if(abc < 0)
    {
        printf("\nSERVER ERROR: Cannot listen.\n");
        close(listenfd);
        exit(1);
    }
    
    cli_addr_len= sizeof(cli_addr);
    
    for(;;)
    {
    printf("\nSERVER: Listening for clients...Press Ctrl + c to stop echo server:\n");
    connfd = accept(listenfd, (struct sockaddr*)&cli_addr,&cli_addr_len);
    if(connfd < 0)
        {
            printf("\nSERVER ERROR: Cannot accept client connections.\n");
            close(listenfd);
            exit(1);
        }
        printf("\nSERVER : Connection from client %s accepted.                          \n",inet_ntoa(cli_addr.sin_addr));
        
    time_t stime = time(NULL);
    snprintf(datebuff,128,"%s",ctime(&stime));
    
    printf("The time is %s",datebuff);
    
    char* finalTimeString = substr(datebuff,11,13);
    //printf("%s\n",finalTimeString);
    int finalTimeValue = atoi(finalTimeString);
    //printf("%d\n",finalTimeValue);
    
    
    if(finalTimeValue >= 7 && finalTimeValue < 12)
    {
        sprintf(dateRes,"%s","Good Morning");
    }
    else if(finalTimeValue >= 12 && finalTimeValue < 18)
    {
        sprintf(dateRes,"%s","Good Afternoon");
    }
    else if(finalTimeValue >= 18 && finalTimeValue < 21)
    {
        sprintf(dateRes,"%s","Good Evening");
    }
        else if(finalTimeValue >= 21 && finalTimeValue < 23)
    {
        sprintf(dateRes,"%s","Good Night");
    }
    
    printf("%s\n",dateRes);
    
    w = write(connfd,dateRes,128);
       if(w < 0)
    {
          printf("\nSERVER ERROR: Cannot send message to the client.\n");
    }
        else
        {
              printf("\nSERVER : Echoed back %s to %s.\n",buff,inet_ntoa(cli_addr.sin_addr));
        }
    }
}