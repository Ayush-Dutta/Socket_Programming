#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<arpa/inet.h>

struct sockaddr_in serv_addr, cli_addr;
int cli_addr_len,sockfd,acceptfd,r,w;

unsigned int port=5010;
char ip[]="127.0.0.7";

FILE *fptr;


int main()
{
    sockfd=socket(AF_INET,SOCK_STREAM,0);
    if(sockfd<0)
        {
            printf("\nSERVER ERROR: Cannot create socket.\n");
            close(sockfd);
            exit(1);
        }
        serv_addr.sin_family=AF_INET;
        serv_addr.sin_port=htons(port);
        inet_aton(ip,(&serv_addr.sin_addr));
        printf("\nSERVER\n");
    
         int bindfd=bind(sockfd,(struct sockaddr*)&serv_addr,sizeof(serv_addr));
        if(bindfd<0)
        {
            printf("\nSERVER ERROR: Cannot bind.\n");
            close(sockfd);
            exit(1);
        }
        while(1)
        {
        
            int q=listen(sockfd,5);
                if(q<0)
               {
                    printf("\nSERVER ERROR: Cannot listen.\n");
                    close(sockfd);
                    exit(1);
                }
        cli_addr_len=sizeof(cli_addr);
            
            printf("\nListening for the client....ctrl+c to exit the server.\n");
        acceptfd = accept(sockfd, (struct sockaddr*)&cli_addr, &cli_addr_len);
                if(acceptfd< 0)
                {
                    printf("\nSERVER ERROR : Cannot accept client connections.\n");
                    close(sockfd);
                    exit(1);
        }
        printf("\nSERVER: Connection from client %s accepted.\n", inet_ntoa(cli_addr.sin_addr));
    
            while(1)
        {
                    char buff1[256]="",buff2[256]="",buff3[256]="";
            r=read(acceptfd,buff1,256);
                    if(r<0)
                    {
                printf("\nSERVER ERROR: Cannot read.\n");
                close(sockfd);
                exit(1);
            }
                    else
                    {
                        buff1[r]='\0';
                buff2[0]='\0';
                buff3[0]='\0';
                        int p=system(buff1);
                                if (strcmp(buff1, "END")!=0)
                        {
                                if(p==0)
                                { 
                        strcat(buff1," > out_file");
                        system(buff1);
                        fptr=fopen("out_file","r");
                                    while(fgets(buff2,256,fptr)!=NULL)
                        strcat(buff3, buff2);
                                    //fclose(fptr);
                                }
                    else
                                        strcpy(buff3,"Invalid Command");
                                }
                else
                {
                    printf("\nSuccessfully ended client %s connection\n",inet_ntoa(cli_addr.sin_addr));
                                break;
                        }
            }
                
                    w=write(acceptfd,buff3,256);
                   if(w<0)
                    {
                printf("\nSERVER ERROR: Cannot Write.\n");
                close(sockfd);
                exit(1);
            }
            }
    }
    close(sockfd);
    return 0;
}

 

 

 

 

 

client

 

#include<sys/socket.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<string.h>
#include<stdio.h>
#include<stdlib.h>

struct sockaddr_in serv_addr;
int skfd,q,w,r;

unsigned int port=5010;
char ip[]="127.0.0.7";
char buff1[256],buff2[256],buff3[256];

 

int main()
{

    skfd=socket(AF_INET,SOCK_STREAM,0);
        if(skfd<0)
        {    
            printf("\nCLIENT ERROR:Cannot Create Socket.\n");
            close(skfd);
        exit(1);
        }
        serv_addr.sin_family=AF_INET;
        serv_addr.sin_port=htons(port);
        inet_aton(ip,(&serv_addr.sin_addr));
    
        int q=connect(skfd,(struct sockaddr*) &serv_addr,sizeof(serv_addr));
        if(q<0)
        {
        printf("\nCLIENT ERROR:Cannot connect to the server.\n");
        close(skfd);
        exit(1);
    }
    
        printf("\nCLIENT:Connected to the server\n");

    while(1)
        {
            printf("\nEnter the Command (Enter END to exit): \n");
            gets(buff1);
        
            w=write(skfd,buff1,256);
            if(w<0)
            {
                    printf("\nCLIENT ERROR: Cannot send meassage to the server.\n");
                    close(skfd);
            exit(1);
            }
        
            int s=strcmp(buff1,"END");
            if(s==0)
                {
            close(skfd);
            exit(1);
                }
            
                r=read(skfd,buff2,256);
                if(r<0)
                {
            printf("\nCLIENT ERROR: Cannot receive mssg from the server.\n");
                }
        else
                    printf("\nMessage from server:\n%s\n",buff2);
         
    }
    close(skfd);
    exit(1);
}